<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何开发一款npm组件？]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BEnpm%E7%BB%84%E4%BB%B6%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot实现WebSocket记录]]></title>
    <url>%2F2019%2F05%2F09%2FSpringBoot%E5%AE%9E%E7%8E%B0WebSocket%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>Java</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于jetspeed门户平台二次开发记录]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%9F%BA%E4%BA%8Ejetspeed%E9%97%A8%E6%88%B7%E5%B9%B3%E5%8F%B0%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>jetspeed</tag>
        <tag>二次开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UEditor独立静态资源服务器搭建记录]]></title>
    <url>%2F2019%2F05%2F09%2FUEditor%E7%8B%AC%E7%AB%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>UEditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源信息发布系统PublicCMS二次开发记录]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%BC%80%E6%BA%90%E4%BF%A1%E6%81%AF%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9FPublicCMS%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>二次开发</tag>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot实现OAuth2记录]]></title>
    <url>%2F2019%2F05%2F09%2FSpringBoot%E5%AE%9E%E7%8E%B0OAuth2%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>Java</tag>
        <tag>OAuth2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot+Spring Data JPA框架搭建记录]]></title>
    <url>%2F2019%2F05%2F09%2FSpringBoot-Spring-Data-JPA%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot+Mybatis框架搭建记录]]></title>
    <url>%2F2019%2F05%2F09%2FSpringBoot-Mybatis%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC+Mybatis框架搭建记录]]></title>
    <url>%2F2019%2F05%2F09%2FSpringMVC-Mybatis%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[持续更新中…]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前后端分离]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[代码管理方式开发配合方式部署方式]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React 开发]]></title>
    <url>%2F2019%2F05%2F09%2FReact-%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[更新中…]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular 开发]]></title>
    <url>%2F2019%2F05%2F09%2FAngular-%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[更新中…]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ionic 开发]]></title>
    <url>%2F2019%2F05%2F09%2FIonic-%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[更新中…]]></content>
      <tags>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC整合WebSocket]]></title>
    <url>%2F2015%2F10%2F13%2FSpringMVC%E6%95%B4%E5%90%88WebSocket%2F</url>
    <content type="text"><![CDATA[Spring4已经加入了对Websocket支持。 引入Spring4的jar包，以及Spring websocket的jar包 web.xml文件用3.0版本。 1234567&lt; web-app xmlns:xsi= “http://www.w3.org/2001/XMLSchema-instance” xmlns= “http://java.sun.com/xml/ns/javaee” xmlns:web= “http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd” xsi:schemaLocation= “http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd” version= “3.0” &gt; Tomcat用7或以上，JDK用7或以上，其他Spring配置文件按默认即可，这里用的是注解方式。 WebSocketConfig.java 123456789101112131415161718192021222324package com.noter.websocket.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;import org.springframework.web.socket.WebSocketHandler;import org.springframework.web.socket.config.annotation.EnableWebSocket;import org.springframework.web.socket.config.annotation.WebSocketConfigurer;import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;import com.noter.websocket.handler.SystemWebSocketHandler;@Configuration@EnableWebMvc@EnableWebSocketpublic class WebSocketConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer &#123; @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123; registry.addHandler(systemWebSocketHandler(), “/webSocketServer.do” ); &#125; @Bean public WebSocketHandler systemWebSocketHandler() &#123; return new SystemWebSocketHandler(); &#125;&#125; SystemWebSocketHandler.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.noter.websocket.handler;import java.io.IOException;import java.util.ArrayList;import org.springframework.web.socket.CloseStatus;import org.springframework.web.socket.TextMessage;import org.springframework.web.socket.WebSocketHandler;import org.springframework.web.socket.WebSocketMessage;import org.springframework.web.socket.WebSocketSession;public class SystemWebSocketHandler implements WebSocketHandler &#123; private static final ArrayList&lt;WebSocketSession&gt; users = new ArrayList&lt;WebSocketSession&gt;();; @Override public void afterConnectionEstablished(WebSocketSession session) throws Exception &#123; System. out.println( “ConnectionEstablished” ); users.add(session); &#125; @Override public void handleMessage(WebSocketSession session, WebSocketMessage&lt;?&gt; message) throws Exception &#123; System. out.println( “session id:” + session.getId()); sendMessageToUsers(session.getId(),(TextMessage) message); &#125; @Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception &#123; if(session.isOpen())&#123; session.close(); &#125; users.remove(session); &#125; @Override public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception &#123; users.remove(session); &#125; @Override public boolean supportsPartialMessages() &#123; return false; &#125; /** * 给所有在线用户发送消息 * * @param message */ public void sendMessageToUsers(String excep, TextMessage message) &#123; for (WebSocketSession user : users) &#123; try &#123; if (user.isOpen()&amp;&amp; !user.getId().equals(excep)) &#123; user.sendMessage(message); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; 前台JSP代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169&lt;%@ page language = “java” contentType= “text/html; charset=UTF-8” pageEncoding= “UTF-8” %&gt;&lt;% String path = request.getContextPath(); String basePath = request.getScheme() + “://” + request.getServerName() + “:” + request.getServerPort() + path + “/”;%&gt;&lt;! DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “http://www.w3.org/TR/html4/loose.dtd” &gt;&lt; html&gt;&lt; head&gt;&lt; meta http-equiv= “Content-Type” content = “text/html; charset=UTF-8”&gt;&lt; title&gt; WebSocket/SockJS Echo Sample (Adapted from Tomcat’s echo sample)&lt;/ title&gt; &lt;style type = “text/css”&gt; #connect-container &#123; float: left; width: 400px &#125; #connect-container div &#123; padding: 5px; &#125; #console-container &#123; float: left; margin-left: 15px; width: 400px; &#125; #console &#123; border: 1px solid #CCCCCC ; border-right-color: #999999; border-bottom-color: #999999; height: 170px; overflow-y: scroll; padding: 5px; width: 100%; &#125; #console p &#123; padding: 0; margin: 0; &#125; &lt;/style &gt; &lt;script src = “../assets/js/sockjs-0.3.min.js”&gt;&lt;/ script &gt; &lt;script type = “text/javascript”&gt; var ws = null; var url = null; var transports = []; var basePath = “ &lt;%= basePath%&gt; “; var wsPath = basePath.replace( “http://”, “ws://” ); function setConnected(connected) &#123; document.getElementById( ‘connect’ ).disabled = connected; document.getElementById( ‘disconnect’ ).disabled = !connected; document.getElementById( ‘echo’ ).disabled = !connected; &#125; function connect() &#123; if (!url) &#123; alert( ‘Select whether to use W3C WebSocket or SockJS’); return ; &#125; ws = new WebSocket(wsPath+‘webSocketServer.do’ ); /* (url.indexOf(‘sockjs’) != -1) ? new SockJS(url, undefined, &#123;protocols_whitelist: transports&#125;) : */ ws.onopen = function () &#123; setConnected( true ); log( ‘Info: connection opened.’ ); &#125;; ws.onmessage = function (event) &#123; for ( var i in event.originalTarget)&#123; console.log( “event[“ +i+“]:” +event.originalTarget[i]); &#125; log( ‘Received: ‘ + event.data); &#125;; ws.onclose = function (event) &#123; setConnected( false ); log( ‘Info: connection closed.’ ); log(event); &#125;; &#125; function disconnect() &#123; if (ws != null) &#123; ws.close(); ws = null ; &#125; setConnected( false ); &#125; function echo() &#123; if (ws != null) &#123; var message = document.getElementById(‘message’ ).value; log( ‘Sent: ‘ + message); ws.send(message); &#125; else &#123; alert( ‘connection not established, please connect.’); &#125; &#125; function updateUrl(urlPath) &#123; if (urlPath.indexOf(‘sockjs’ ) != -1) &#123; url = urlPath; document.getElementById(‘sockJsTransportSelect’ ).style.visibility = ‘visible’; &#125; else &#123; if (window.location.protocol == ‘http:’) &#123; url = ‘ws://’ + window.location.host + urlPath; &#125; else &#123; url = ‘wss://’ + window.location.host + urlPath; &#125; document.getElementById(‘sockJsTransportSelect’ ).style.visibility = ‘hidden’; &#125; &#125; function updateTransport(transport) &#123; transports = (transport == ‘all’ ) ? [] : [transport]; &#125; function log(message) &#123; var console = document.getElementById( ‘console’); var p = document.createElement( ‘p’); p.style.wordWrap = ‘break-word’ ; p.appendChild(document.createTextNode(message)); console.appendChild(p); while (console.childNodes.length &gt; 25) &#123; console.removeChild(console.firstChild); &#125; console.scrollTop = console.scrollHeight; &#125; &lt;/script &gt;&lt;/ head&gt;&lt; body&gt;&lt; noscript&gt;&lt; h2 style=” color: #ff0000“ &gt;Seems your browser doesn’t support Javascript! Websockets rely on Javascript being enabled. Please enable Javascript and reload this page!&lt;/ h2&gt;&lt;/ noscript &gt;&lt; div&gt; &lt;div id = “connect-container”&gt; &lt;input id = “radio1” type= “radio” name= “group1” onclick =“updateUrl(‘ $&#123;contextPath&#125; /webSocketServer’);”&gt; &lt;label for = “radio1”&gt; W3C WebSocket&lt;/ label &gt; &lt;br &gt; &lt;input id = “radio2” type= “radio” name= “group1” onclick =“updateUrl(‘/spring-websocket-test/sockjs/echo’);” &gt; &lt;label for = “radio2”&gt; SockJS&lt;/ label &gt; &lt;div id = “sockJsTransportSelect” style=” visibility: hidden;” &gt; &lt;span &gt;SockJS transport: &lt;/ span&gt; &lt;select onchange =“updateTransport(this.value)” &gt; &lt;option value = “all”&gt; all&lt;/ option &gt; &lt;option value = “websocket”&gt; websocket&lt;/ option &gt; &lt;option value = “xhr-polling”&gt; xhr-polling &lt;/option &gt; &lt;option value= “jsonp-polling” &gt;jsonp-polling &lt;/ option&gt; &lt;option value= “xhr-streaming” &gt;xhr-streaming &lt;/ option&gt; &lt;option value= “iframe-eventsource” &gt;iframe– eventsource&lt;/ option &gt; &lt;option value= “iframe-htmlfile” &gt;iframe– htmlfile&lt;/ option &gt; &lt;/ select&gt; &lt;/div &gt; &lt;div &gt; &lt;button id = “connect” onclick =“connect();” &gt;Connect &lt;/ button&gt; &lt;button id = “disconnect” disabled= “disabled” onclick =“disconnect();” &gt;Disconnect &lt;/ button&gt; &lt;/div &gt; &lt;div &gt; &lt;textarea id = “message” style=” width: 350px“ &gt;Here is a message!&lt;/ textarea&gt; &lt;/div &gt; &lt;div &gt; &lt;button id = “echo” onclick= “echo();” disabled =“disabled” &gt;Echo message &lt;/ button&gt; &lt;/div &gt; &lt;/div &gt; &lt;div id = “console-container”&gt; &lt;div id = “console”&gt;&lt;/ div&gt; &lt;/div&gt;&lt;/ div&gt;&lt;/ body&gt;&lt;/ html&gt; 注：最后只要注意你定义的springmvc拦截的路径规则和请求路径即可，我一开始总是报404错误，就是路径写错了。]]></content>
      <tags>
        <tag>Java</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Phonegap jQueryMobile 在线应用拍照、相册选择上传+预览]]></title>
    <url>%2F2015%2F07%2F07%2FPhonegap-jQueryMobile-%E5%9C%A8%E7%BA%BF%E5%BA%94%E7%94%A8%E6%8B%8D%E7%85%A7%E3%80%81%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E4%B8%8A%E4%BC%A0-%E9%A2%84%E8%A7%88%2F</url>
    <content type="text"><![CDATA[拍照上传以及从相册中选择图片上传是大多数手机应用的典型功能，这几天在做一个移动端的项目，其中就用到该功能。 项目技术选择的是Phonegap+jQueryMobile，因为jQuery自己比较熟悉，用jQueryMobile没有什么大的难点。 界面用jQueryMobile搭的很快，一开始打算用Phonegap将应用做为离线版本，但后来发现离线版本升级的话还是和普通的app一样，都需要重新安装，这就没有了WebApp的优势和亮点，故最终选择了在线版本，即将项目作为一个web应用，用Tomcat发布在服务器上，Phonegap作为一个app外壳行使浏览器功能在其中请求服务器上的页面等资源。 做该功能的时候，由于对于Phonegap接触不久，花了我整整两天的时间，这两天没有做其他的，一直在研究如何实现图片预览，网上、官网有很多成功的例子，但没有一个在我这边成功预览的，几乎看遍了网上所有的帖子，点坏了鼠标！心情坏到了极点，因为本以为很简单的东西，而后网上说的也都很简单，很多帖子都是一样的内容，但是我却死活跑不通，崩溃！ 到最后，才发现问题原来出在我的“在线”应用上，无语，其实做J2EE的我深知浏览器端是无权限操作本地文件的，但是由于对Phonegap的不了解，由于知道Phonegap可以直接操作本地资源，误认为用了Phonegap就无敌了，你以为呢！于是我就把WebApp整成离线的试下喽，果然，可以显示了！ 但项目已经做到这个地步了，再把它重构成离线的？不可取。于是我就开始分析了。。。 Phonegap不是可以操作本地文件吗？html中的img标签不能根据本地图片路径渲染图片，但它可以不用文件路径啊！于是呵呵了。 最终解决方案是用Phonegap的FileReader来根据本地图片路径以base64的形式读取其内容，base64是可以直接在img标签上渲染的，所以问题就解决了。 下面截取拍照上传以及预览的代码如下： 图片处理代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144var picUrl = "" ;function capturePhotoUrl() &#123; navigator.camera.getPicture(onCaptureSuccess, onUrlFail, &#123; quality : 80,// allowEdit : true,//在Android中此配置忽略 destinationType : Camera.DestinationType.FILE_URI, sourceType:Camera.PictureSourceType.CAMERA, targetWidth : 800, // 生成的图片大小 单位像素 targetHeight : 640 &#125;); &#125;function onCaptureSuccess(imageURI) &#123; picUrl = imageURI; //这是关键部分 window.resolveLocalFileSystemURI(imageURI, function(fileEntry)&#123; fileEntry.file( function(file)&#123; var reader = new FileReader(); reader.onloadend = function(evt) &#123; $( "#uploadImgDom").append("&lt;img path='"+imageURI+"' class='uploadImg' src='"+evt.target.result+"' /&gt;"); $( "#report-page").trigger("create" ); &#125;; reader.readAsDataURL(file); &#125;, readFileFail); &#125;, readFileFail);// $("#urlinfo").text("图片的原始路径" + imageURI);&#125; function readFileFail(evt)&#123; navigator.notification.alert( "文件读取失败，原因：" + evt.code, null, "警告" );&#125; function onUrlFail(message) &#123; navigator.notification.alert( "失败，原因：" + message, null, "警告" );&#125; function loadImageLocal() &#123; navigator.camera.getPicture(onLoadSuccess, onUrlFail, &#123; quality : 80, sourceType : Camera.PictureSourceType.PHOTOLIBRARY, destinationType : Camera.DestinationType.FILE_URI,// encodingType : Camera.EncodingType.JPEG,// mediaType : Camera.MediaType.PICTURE, targetWidth : 800, // 生成的图片大小 单位像素，选择图片的时候一定要制定这个值，否则 targetHeight : 640 &#125;); &#125; function onLoadSuccess(imageURI) &#123; imageURI = imageURI + ".jpg"; picUrl = imageURI; window.resolveLocalFileSystemURI(imageURI, function(fileEntry)&#123; fileEntry.file( function(file)&#123; var reader = new FileReader(); reader.onloadend = function(evt) &#123; $( "#uploadImgDom").append("&lt;img path='"+imageURI+"' class='uploadImg' src='"+evt.target.result+"' /&gt;"); $( "#report-page").trigger("create" ); &#125;; reader.readAsDataURL(file); &#125;, readFileFail); &#125;, readFileFail);// $("#urlinfo").text("图片的原始路径" + picUrl);&#125; function uploadPhoto() &#123; $("#report-btn").attr(&#123; "disabled": "disabled"&#125;); var options = new FileUploadOptions(); options.fileKey = "file"; options.fileName = picUrl.substr(picUrl.lastIndexOf( '/') + 1); options.mimeType = "image/jpeg"; var ft = new FileTransfer(); //文件上传类 ft.onprogress = function (progressEvt) &#123; //显示上传进度条 if (progressEvt.lengthComputable) &#123; navigator.notification.progressValue(Math.round(( progressEvt.loaded / progressEvt.total ) * 100)); &#125; &#125; navigator.notification.progressStart( "提醒", "当前上传进度" ); var params = new Object(); params.title = $( "#textinput-2").val(); params.info = $( "#textarea-2").val(); params.longitude = $( "#longitude").text(); params.latitude = $( "#latitude").text(); options.params = params; ft.upload(picUrl, basePath+ "/report", win, fail, options);&#125; function win(r) &#123; navigator.notification.progressStop(); //停止进度条 $("#returnpic").attr( "src", basePath+ "/files/" + r.response); // $("#returninfo").html(// "上传成功\n：反馈的信息:r.responseCode:" + r.responseCode + "\nr.response:"// + r.response + "\nr.bytesSent:" + r.bytesSent); $("#report-btn").removeAttr( "disabled"); navigator.notification.alert( "上传成功！" , function()&#123; $( "#reportPageBackBtn").click(); &#125;, "提醒");&#125; function fail(error) &#123; /* * FileTransferError.FILE_NOT_FOUND_ERR：1 文件未找到错误。 * •FileTransferError.INVALID_URL_ERR：2 无效的URL错误。 * •FileTransferError.CONNECTION_ERR：3 连接错误。 FileTransferError.ABORT_ERR = * 4; 程序异常 */ var errorcode = error.code; var errstr = ""; switch (errorcode) &#123; case 1: &#123; errstr = "错误代码1：源文件路径异常，请重新选择或者拍照上传！" ; break; &#125; case 2: &#123; errstr = "错误代码2:目标地址无效,请重试！" ; break; &#125; case 3: &#123; errstr = "您手机或者后台服务器网络异常,请重新上传！" ; break; &#125; default: &#123; errstr = "程序出错"; break; &#125; &#125; $("#returninfo").text( "上传失败,错误代码:" + errstr + "上传源文件:" + error.source + "目标地址:" + error.target + "请重新上传！" ); $("#report-btn").removeAttr( "disabled");&#125; 前台显示代码：1234567891011&lt;div role= "main" class = "ui-content jqm-content" data-iscroll ="content" &gt; &lt;div class = "ui-grid-a"&gt; &lt;div class = "ui-block-a"&gt; &lt;a href = "#" onclick ="capturePhoto()" class = "ui-shadow ui-btn ui-btn-b ui-corner-all ui-btn-icon-left ui-icon-camera"&gt; 拍照&lt;/ a&gt; &lt;/div&gt; &lt;div class = "ui-block-b"&gt; &lt;a href = "#" onclick ="loadImageLocal()" class= "ui-shadow ui-btn ui-btn-b ui-corner-all ui-btn-icon-left ui-icon-heart"&gt; 相册&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id = "returninfo"&gt;&lt;/div&gt;&lt;div id = "uploadImgDom"&gt;&lt;/div&gt; 后台上传的代码就不贴了，就一个Servlet。 谨记我这两天的精彩编程生活。 最后感谢所有网友的帮助与分享！]]></content>
      <tags>
        <tag>WebApp</tag>
      </tags>
  </entry>
</search>
